This code finds all 5x5 blocks of letters such that every row and column is a five letter word.

First, it takes the dictionary of words from class, and removes all words that do not have 5 letters or have characters like "Ã©".  However, even after we have narrowed the list down to 5 letter words with normal lower-case characters, there are still too many words.  With all of these five letter words, there would be thousands of 5x5 boxes and the code would crash your ram.  So, the code narrows the list further to only one in every five 5 letter words, which still produces a large number of boxes.

Even with this shortened list of words, the code would still take a large amount of time to run if not coded optimally.  To get a reasonable run-time, I put the words into the grid as follows:

First you put in the first horizontal word:

XXXXX
.....
.....
.....
.....

Then you put in the first vertical word:

XXXXX
X....
X....
X....
X....

We note that for the second word, the first letter is already determined, so we have a much shorter list of words to check.  From here on we alternate putting in horizontal and vertical words, where the number of known starting letters for each subsequent word is increasing.

Using this strategy, all we need now is a fast method to get all words starting with a certain string of letters:
For example, if we were putting in the 3rd horizontal word, we would know the first two letters (say they were 'ab'): then we would need a fast method that narrows our list of 5 letter words to just the words starting with 'ab'.  I achieved a sufficiently fast method by having not only a list of all the five letter words in alphabetical order, but five other lists too.  The first was a list of all the first letters, the second a list of all the second letters, and so on.  Using these five lists, I narrowed a range of words that work with a min and max index in the list.

After getting the list of valid words, all that was left to do was to iterate through the possibilites (which weren't that many with this method + ran moderately quickly) with recursion, and every time it completed a 5x5, it would print it out.
